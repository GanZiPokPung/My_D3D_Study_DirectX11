지연 쉐이딩
(Deffered Shading)

디퍼드 쉐이딩은 전통적인 렌더링을 복잡한 조명을 필요로 하는 쉐이더의 효율성을 향상 시키도록 설계된 2 단계 시스템으로 분할하는 프로세스이다.

첫 번째 단계에서는 정점과 픽셀 쉐이더를 사용하여 평소와 같이 렌더링한다. 그러나 픽셀 쉐이더의 목적은 완전히 다르다. 우리는 더 이상 픽셀 쉐이더를 사용하여 라이팅 계산을 수행하지 않고 백 버퍼에 컬러를 출력한다. 대신 픽셀에 대한 정보(법선, 텍스처 색상 등)를 렌더링에서 텍스처 버퍼로 출력한다. 이제 첫번째 스테이지의 픽셀 쉐이더 출력은 두 번째 스테이지의 텍스처 입력으로 사용할 수 있는 장면 정보로 가득 찬 2D텍스처가 되었다.

두 번째 단계에서는 기존의 모든 3D 쉐이더를 다시 작성하여 첫번째 스테이지의 렌더링에서 텍스쳐 출력으로 2D 포스트 프로세싱을 수행한다.
또한 2D 후처리 작업을 수행하기 때문에 수천개의 복잡한 3D 오브젝트로 가득찬 거대한 장면 대신 조명 방정식을 실행하는데 설정된 픽셀수가 있다. 따라서 장면에 수천개의 조명이 있거나 각 객체에 몇 개의 다각형이 있는지 더 이상 중요하지 않다. *최종 2D 출력 픽셀에 대해서만 조명 방정식을 수행한다.*

따라서 지연 쉐이딩은 장면의 모든 단일 모델에 대한 정점 및 픽셀 쉐이더에서 필요한 모든 종류의 계산을 제거한다. 그리고 이러한 모든 복잡한 계산은 출력 데이터를 생성한다. 출력 데이터는 일반적으로 도려내기 때문에 아무렇게나 폐기된다. 그래서 쉐이딩 방정식은 장면 크기, 조명 수 등에 관계없이 간단히 계산되고 기타 모든 비효율적인 부분들은 제거된다. 이것은 실제로 복잡한 조명을 간단히 처리 할 수 있을 뿐만 아니라 이미 2D 후 처리가 필요한 쉐이더를 단순화하고 결합할 수 있다.




포워드 쉐이딩의 경우

각각의 메쉬가 각각의 라이트를 계산하기 때문에 
광원 갯수 X 메쉬 갯수 의 드로우 콜이 발생해, 광원과 메시가 늘어날 때 마다 드로우콜이 굉장히 증가하게 된다.

하지만 디퍼드는 출력되고 있는 메쉬들의 정보집합인 GBuffer를 이용하여 각각의 광원들을 라이팅 계산하기 때문에 
 광원 갯수 + 메쉬 갯우 의 드로우 콜이 발생한다.

1. GBuffer에 렌더링 하되 후처리에 필요한 정보를 모두 담는다.
2. 각 광원이 영향을 끼치는 픽셀을 찾아 해당 GBuffer 데이터를 읽어 들인 후 픽셀의 조명 색상을 계산해 중첩 버퍼에 저장한다.

단점 : GBuffer에 저장된 값으로 한번에 계산되고 뽑아낸 픽셀을 사용하기 때문에 반투명(Blend) 처리가 어렵다.

* 그러나 먼저 불투명 객체를 디퍼드로 그린 후, 반투명 객체를 포워드 방식으로 그리면 해결 가능하다.




