29. 물

반사 + 굴절 (ex. 강물, 연못, 수영장 같은 물 표현)

(비교적 잔잔)

반사된 씬(물위) + 굴절(물 아래)

잔잔한 물결을 표현할 노말맵 추가

이 노말값을 이용하여 샘플링 위치를 흩뜨려서 물결이
굴절하는 곳을 왜곡시키는 효과를 내도록 할것이다.
또한 Y축 방향으로 텍스쳐를 흐르게 하여 흐르는 듯한
물을 재현할 것.

일부 그래픽 엔진은 굴절이나 반사 텍스쳐를 15 ~ 30 플레임
간격으로 캡쳐하는데, 이렇게 하여 매 프레임마다
비싼 RTT를 하지 않도록 한다.

30. 다중 포인트 조명

빛나는 전구로 묘사할 수 있다.
위치와 색상을 가지며, 방향은 가지고 있지 않다.

다중광원 : 포인트 조명이 여러개를 가지는 경우

31. 3D 사운드

사운드 버블 : 경계를 만들어 그 안에 들어가 있는 사람(리스너)만
	소리를 듣게 하고, 그 중심에 가까이 갈수록 그 사운드는
	더 큰 소리를 낼 것

32. 유리, 얼음

빛이 어떻게 꺾이는 지 => 노말맵핑
각 픽셀들은 유리나 얼음 뒤에 있는 픽셀을 샘플링할때 오프셋의 역할
빛의 굴절처럼 보이는 효과를 만들어 냄으로 빛이 유리나 얼음을
통과하는 모습을 비슷하게 흉내내어 그 뒤에 있는 물체를 비춘다.
이런 굴절 효과를 섭동이라고 부른다.

refractionScale이라는 변수를 이용하여 섭동의 크기를 조절한다.

1단계 : 유리 뒤에 있는 씬을 텍스쳐에 그린다. 이를 굴절 텍스쳐라 부름
2단계 : 유리 표면에 굴절 텍스쳐를 투영
3단계 : 유리를 투과하는 빛을 흉내내기 위하여 노말맵을 이용하여 굴절             텍스쳐의 좌표를 흔든다.
4단계 : 섭동이 끝난 굴절 텍스쳐와 유리의 색상 텍스쳐를 혼합하여 최종            결과물을 만듬

33. 불

노이즈 텍스쳐를 사용.
텍스쳐의 샘플링 위치를 흩뜨려 놓게 한다.

원본 텍스쳐를 반복 나열하여 디테일한 텍스쳐를 만듬 -> 옥타브

노이즈 텍스쳐(여러개를 섞어 y값이동을 하며 불이 나는 느낌을 줌) +
왜곡 수치(왜곡을 주어 불이 끝에서 흩어지는 효과를 줌) +
알파값(중앙쪽에 불이 거세게 느껴지는 효과와 범위 지정) = 불

34. 빌보드

먼거리에 있는 3D 지형을 표시하기 위해 텍스쳐를 입힌 사각형을 사용하는 과정.

예를 들면 수천개의 나무들이 있는 숲 씬이 있다고 가정하면, 폴리곤의 개수가 많은 나무들로 구성된 복잡한 숲을 실시간 렌더링으로 그려낸다는 것은 현존하는 대부분의 그래픽 카드의 가용성을 넘어서는 일이다. 따라서 50개 정도의 가장 가까운 나무들만 제대로 그리고 나머지 나무들은 빌보드로 그리게 하는 방법을 쓰게 됩니다. 이렇게 함으로 전체 숲을 실시간 렌더링하면서 전체 폴리곤 개수는 낮게 유지할 수 있다. 유저가 가까운 50개의 나무를 지나치면 그 다음 50개의 나무가 점차적으로 빌도드 에서 풀 폴리곤 모델로 바뀌게 될 것이다. 이런 식으로 가장 가까운 나무들은 항상 디테일한 폴리곤으로 보여주고 밀리 있는 나무들은 항상 적은 폴리곤을 사용하는 빌보드가 되게 할 수 있습니다. 이 방법은 건물이나 구름, 산, 구조물, 식물, 파티클 등등 다른 많은 물체에도 사용할 수 있습니다.

카메라 위치와 모델 위치를 바탕으로 아크 탄젠트 함수를 사용하여
현재 카메라 위치를 향하도록 빌보드 모델에 적용해야하는 회전을 계산

역탄젠트(아크탄젠트)
atan2( x의 증가량, z의 증가량 )  >> 이는 곧 라디안값이다.
각도 = 라디안값 * (180 / PI) 

35. 깊이 버퍼 (Z 버퍼라고도 함)

주로 뷰잉 프러스 텀 내부의 모든 픽셀의 깊이를 기록하는 데 사용.
둘 이상의 픽셀이 동일한 위치를 차지할 때 깊이 값을 사용하여 유지할
픽셀을 결정한다. 

깊이 버퍼 값은 부동 소수점. 범위는 가까운 클리핑면에서 0.0, 먼 클리핑면에서 1.0로 설정된 0.f 부터 1.f 까지이다. 그러나 깊이 버퍼의 부동 소수점 값은 선형 분포가 아니다. 부동 소수점 값의 약 90%는 가까운 클리핑 평면에 가까운 깊이 버퍼의 처음 10%에서 발생한다. 나머지 10% (0.9f에서 1.f까지)는 깊이 버퍼의 마지막 90%를 차지한다.

깊이 버퍼가 이렇게 설정된 이유는 대다수의 프로그램이 가까운것은 정확한 세부 정보를 많이 나타내야 하며, 멀리있는 개체는 정밀도를 염려하지 않기 때문이다. 거리가 중요한 경우 멀리 겹치는 먼 물체가 문제가 되어 픽셀이 깜박 거리게 된다.(Z싸움이라고도 함)

깊이 구간을 나누어 처음 10%는 세부 범프매핑 등을 세부계산을 처리하고 나머지는 일반 확산 조명같은 연산을 사용하는 방법으로 최적화를 꽤할 수도 있다.
































